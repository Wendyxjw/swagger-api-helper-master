// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate services 1`] = `
"export interface ApiResponse {
	code?: number;
	type?: string;
	message?: string;
}
export interface Category {
	id?: number;
	name?: string;
}
export interface Pet {
	id?: number;
	category?: Category;
	name: string; // example: \\"doggie\\"
	photoUrls: Array<string>;
	tags?: Array<Tag>;
	status?: 'available' | 'pending' | 'sold'; // pet status in the store
}
export interface Tag {
	id?: number;
	name?: string;
}
export interface Order {
	id?: number;
	petId?: number;
	quantity?: number;
	shipDate?: string;
	status?: 'placed' | 'approved' | 'delivered'; // Order Status
	complete?: boolean;
}
export interface User {
	id?: number;
	username?: string;
	firstName?: string;
	lastName?: string;
	email?: string;
	password?: string;
	phone?: string;
	userStatus?: number; // User Status
}"
`;

exports[`generate services 2`] = `
"import stringify from '@/utils/stringify';
import request from '@/utils/request';
import { ExtraFetchOptions } from '@/types';
import { ApiResponse, Pet } from './interfaces';


export interface PostPetPetIdUploadImagePayload extends ExtraFetchOptions {
	petId: number;
	/**
	 * 
	 * export interface FormContent {
	 * 	additionalMetadata?: string; // Additional data to pass to server
	 * 	file?: File; // file to upload
	 * }
	 * 
	 */
	body: FormData;
}
    
/**
 * @summary uploads an image
 */
export async function postPetPetIdUploadImage(payload: PostPetPetIdUploadImagePayload) {
	const { petId, ...extraFetchOptions } = payload;
    return request<ApiResponse>(\`/v2/pet/\${petId}/uploadImage\`, {
		...extraFetchOptions,
        method: 'post',
    });
}

export interface PostPetPayload extends ExtraFetchOptions {
	/**
	 * Pet object that needs to be added to the store
	 */
	body: Pet;
}
    
/**
 * @summary Add a new pet to the store
 */
export async function postPet(payload: PostPetPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/pet\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}

export interface PutPetPayload extends ExtraFetchOptions {
	/**
	 * Pet object that needs to be added to the store
	 */
	body: Pet;
}
    
/**
 * @summary Update an existing pet
 */
export async function putPet(payload: PutPetPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/pet\`, {
		...extraFetchOptions,
        method: 'put',
		body,
    });
}


export interface GetPetFindByStatusQuery {
	status: Array<'available' | 'pending' | 'sold'>; // Status values that need to be considered for filter
}

export interface GetPetFindByStatusPayload extends ExtraFetchOptions {
	query: GetPetFindByStatusQuery;
}
    
/**
 * @summary Finds Pets by status
 * @description Multiple status values can be provided with comma separated strings
 */
export async function getPetFindByStatus(payload: GetPetFindByStatusPayload) {
	const { query, ...extraFetchOptions } = payload;
    return request<Pet[]>(\`/v2/pet/findByStatus?\${stringify(query)}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}


export interface GetPetFindByTagsQuery {
	tags: Array<string>; // Tags to filter by
}

export interface GetPetFindByTagsPayload extends ExtraFetchOptions {
	query: GetPetFindByTagsQuery;
}
    
/**
 * 废弃不用 
 * @deprecated
 * @summary Finds Pets by tags
 * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export async function getPetFindByTags(payload: GetPetFindByTagsPayload) {
	const { query, ...extraFetchOptions } = payload;
    return request<Pet[]>(\`/v2/pet/findByTags?\${stringify(query)}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface GetPetPetIdPayload extends ExtraFetchOptions {
	petId: number;
}
    
/**
 * @summary Find pet by ID
 * @description Returns a single pet
 */
export async function getPetPetId(payload: GetPetPetIdPayload) {
	const { petId, ...extraFetchOptions } = payload;
    return request<Pet>(\`/v2/pet/\${petId}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface PostPetPetIdPayload extends ExtraFetchOptions {
	petId: number;
	/**
	 * 
	 * export interface FormContent {
	 * 	name?: string; // Updated name of the pet
	 * 	status?: string; // Updated status of the pet
	 * }
	 * 
	 */
	body: FormData;
}
    
/**
 * @summary Updates a pet in the store with form data
 */
export async function postPetPetId(payload: PostPetPetIdPayload) {
	const { petId, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/pet/\${petId}\`, {
		...extraFetchOptions,
        method: 'post',
    });
}

export interface DeletePetPetIdPayload extends ExtraFetchOptions {
	petId: number;
}
    
/**
 * @summary Deletes a pet
 */
export async function deletePetPetId(payload: DeletePetPetIdPayload) {
	const { petId, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/pet/\${petId}\`, {
		...extraFetchOptions,
        method: 'delete',
    });
}


"
`;

exports[`generate services 3`] = `
"import request from '@/utils/request';
import { ExtraFetchOptions } from '@/types';
import { Order } from './interfaces';


export interface PostStoreOrderPayload extends ExtraFetchOptions {
	/**
	 * order placed for purchasing the pet
	 */
	body: Order;
}
    
/**
 * @summary Place an order for a pet
 */
export async function postStoreOrder(payload: PostStoreOrderPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<Order>(\`/v2/store/order\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}

export interface GetStoreOrderOrderIdPayload extends ExtraFetchOptions {
	orderId: number;
}
    
/**
 * @summary Find purchase order by ID
 * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export async function getStoreOrderOrderId(payload: GetStoreOrderOrderIdPayload) {
	const { orderId, ...extraFetchOptions } = payload;
    return request<Order>(\`/v2/store/order/\${orderId}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface DeleteStoreOrderOrderIdPayload extends ExtraFetchOptions {
	orderId: number;
}
    
/**
 * @summary Delete purchase order by ID
 * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export async function deleteStoreOrderOrderId(payload: DeleteStoreOrderOrderIdPayload) {
	const { orderId, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/store/order/\${orderId}\`, {
		...extraFetchOptions,
        method: 'delete',
    });
}

export interface GetStoreInventoryPayload extends ExtraFetchOptions {

}
    
/**
 * @summary Returns pet inventories by status
 * @description Returns a map of status codes to quantities
 */
export async function getStoreInventory(payload: GetStoreInventoryPayload) {
	const extraFetchOptions = payload;
    return request<object>(\`/v2/store/inventory\`, {
		...extraFetchOptions,
        method: 'get',
    });
}


"
`;

exports[`generate services 4`] = `
"import stringify from '@/utils/stringify';
import request from '@/utils/request';
import { ExtraFetchOptions } from '@/types';
import { User } from './interfaces';


export interface PostUserCreateWithArrayPayload extends ExtraFetchOptions {
	/**
	 * List of user object
	 */
	body: User[];
}
    
/**
 * @summary Creates list of users with given input array
 */
export async function postUserCreateWithArray(payload: PostUserCreateWithArrayPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/createWithArray\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}

export interface PostUserCreateWithListPayload extends ExtraFetchOptions {
	/**
	 * List of user object
	 */
	body: User[];
}
    
/**
 * @summary Creates list of users with given input array
 */
export async function postUserCreateWithList(payload: PostUserCreateWithListPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/createWithList\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}

export interface GetUserUsernamePayload extends ExtraFetchOptions {
	username: string;
}
    
/**
 * @summary Get user by user name
 */
export async function getUserUsername(payload: GetUserUsernamePayload) {
	const { username, ...extraFetchOptions } = payload;
    return request<User>(\`/v2/user/\${username}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface PutUserUsernamePayload extends ExtraFetchOptions {
	username: string;
	/**
	 * Updated user object
	 */
	body: User;
}
    
/**
 * @summary Updated user
 * @description This can only be done by the logged in user.
 */
export async function putUserUsername(payload: PutUserUsernamePayload) {
	const { username, body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/\${username}\`, {
		...extraFetchOptions,
        method: 'put',
		body,
    });
}

export interface DeleteUserUsernamePayload extends ExtraFetchOptions {
	username: string;
}
    
/**
 * @summary Delete user
 * @description This can only be done by the logged in user.
 */
export async function deleteUserUsername(payload: DeleteUserUsernamePayload) {
	const { username, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/\${username}\`, {
		...extraFetchOptions,
        method: 'delete',
    });
}


export interface GetUserLoginQuery {
	username: string; // The user name for login
	password: string; // The password for login in clear text
}

export interface GetUserLoginPayload extends ExtraFetchOptions {
	query: GetUserLoginQuery;
}
    
/**
 * @summary Logs user into the system
 */
export async function getUserLogin(payload: GetUserLoginPayload) {
	const { query, ...extraFetchOptions } = payload;
    return request<string>(\`/v2/user/login?\${stringify(query)}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface GetUserLogoutPayload extends ExtraFetchOptions {

}
    
/**
 * @summary Logs out current logged in user session
 */
export async function getUserLogout(payload: GetUserLogoutPayload) {
	const extraFetchOptions = payload;
    return request<undefined>(\`/v2/user/logout\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface PostUserPayload extends ExtraFetchOptions {
	/**
	 * Created user object
	 */
	body: User;
}
    
/**
 * @summary Create user
 * @description This can only be done by the logged in user.
 */
export async function postUser(payload: PostUserPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}


"
`;

exports[`generate services 5`] = `
"export interface User {
	id?: number;
	username?: string;
	firstName?: string;
	lastName?: string;
	email?: string;
	password?: string;
	phone?: string;
	userStatus?: number; // User Status
}"
`;

exports[`generate services 6`] = `
"import stringify from '@/utils/stringify';
import request from '@/utils/request';
import { ExtraFetchOptions } from '@/types';
import { User } from './interfaces';


export interface PostUserCreateWithArrayPayload extends ExtraFetchOptions {
	/**
	 * List of user object
	 */
	body: User[];
}
    
/**
 * @summary Creates list of users with given input array
 */
export async function postUserCreateWithArray(payload: PostUserCreateWithArrayPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/createWithArray\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}

export interface PostUserCreateWithListPayload extends ExtraFetchOptions {
	/**
	 * List of user object
	 */
	body: User[];
}
    
/**
 * @summary Creates list of users with given input array
 */
export async function postUserCreateWithList(payload: PostUserCreateWithListPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/createWithList\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}

export interface GetUserUsernamePayload extends ExtraFetchOptions {
	username: string;
}
    
/**
 * @summary Get user by user name
 */
export async function getUserUsername(payload: GetUserUsernamePayload) {
	const { username, ...extraFetchOptions } = payload;
    return request<User>(\`/v2/user/\${username}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface PutUserUsernamePayload extends ExtraFetchOptions {
	username: string;
	/**
	 * Updated user object
	 */
	body: User;
}
    
/**
 * @summary Updated user
 * @description This can only be done by the logged in user.
 */
export async function putUserUsername(payload: PutUserUsernamePayload) {
	const { username, body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/\${username}\`, {
		...extraFetchOptions,
        method: 'put',
		body,
    });
}

export interface DeleteUserUsernamePayload extends ExtraFetchOptions {
	username: string;
}
    
/**
 * @summary Delete user
 * @description This can only be done by the logged in user.
 */
export async function deleteUserUsername(payload: DeleteUserUsernamePayload) {
	const { username, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user/\${username}\`, {
		...extraFetchOptions,
        method: 'delete',
    });
}


export interface GetUserLoginQuery {
	username: string; // The user name for login
	password: string; // The password for login in clear text
}

export interface GetUserLoginPayload extends ExtraFetchOptions {
	query: GetUserLoginQuery;
}
    
/**
 * @summary Logs user into the system
 */
export async function getUserLogin(payload: GetUserLoginPayload) {
	const { query, ...extraFetchOptions } = payload;
    return request<string>(\`/v2/user/login?\${stringify(query)}\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface GetUserLogoutPayload extends ExtraFetchOptions {

}
    
/**
 * @summary Logs out current logged in user session
 */
export async function getUserLogout(payload: GetUserLogoutPayload) {
	const extraFetchOptions = payload;
    return request<undefined>(\`/v2/user/logout\`, {
		...extraFetchOptions,
        method: 'get',
    });
}

export interface PostUserPayload extends ExtraFetchOptions {
	/**
	 * Created user object
	 */
	body: User;
}
    
/**
 * @summary Create user
 * @description This can only be done by the logged in user.
 */
export async function postUser(payload: PostUserPayload) {
	const { body, ...extraFetchOptions } = payload;
    return request<undefined>(\`/v2/user\`, {
		...extraFetchOptions,
        method: 'post',
		body,
    });
}


"
`;
